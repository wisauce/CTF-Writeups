diff --git a/src/compiler/access-builder.cc b/src/compiler/access-builder.cc
index 1cfef4538d0..0a75b86568e 100644
--- a/src/compiler/access-builder.cc
+++ b/src/compiler/access-builder.cc
@@ -1235,6 +1235,16 @@ ElementAccess AccessBuilder::ForFixedArrayElement(ElementsKind kind) {
 }
 
 // static
+
+ElementAccess AccessBuilder::ForStackArgument() {
+  ElementAccess access = {
+      kUntaggedBase,
+      CommonFrameConstants::kFixedFrameSizeAboveFp - kSystemPointerSize,
+      Type::NonInternal(), MachineType::Pointer(),
+      WriteBarrierKind::kNoWriteBarrier};
+  return access;
+}
+
 ElementAccess AccessBuilder::ForFixedDoubleArrayElement() {
   ElementAccess access = {kTaggedBase, OFFSET_OF_DATA_START(FixedDoubleArray),
                           TypeCache::Get()->kFloat64, MachineType::Float64(),
diff --git a/src/compiler/access-builder.h b/src/compiler/access-builder.h
index 392089b7929..627f2ed5365 100644
--- a/src/compiler/access-builder.h
+++ b/src/compiler/access-builder.h
@@ -350,6 +350,9 @@ class V8_EXPORT_PRIVATE AccessBuilder final
   // Provides access to SloppyArgumentsElements elements.
   static ElementAccess ForSloppyArgumentsElementsMappedEntry();
 
+  // Provides access to stack arguments
+  static ElementAccess ForStackArgument();
+
   // Provides access to FixedDoubleArray elements.
   static ElementAccess ForFixedDoubleArrayElement();
 
diff --git a/src/compiler/turboshaft/machine-lowering-reducer-inl.h b/src/compiler/turboshaft/machine-lowering-reducer-inl.h
index 1d41bed3cdd..a164d7d531c 100644
--- a/src/compiler/turboshaft/machine-lowering-reducer-inl.h
+++ b/src/compiler/turboshaft/machine-lowering-reducer-inl.h
@@ -2494,22 +2494,9 @@ class MachineLoweringReducer : public Next {
   }
 
   V<Object> REDUCE(LoadStackArgument)(V<WordPtr> base, V<WordPtr> index) {
-    // Note that this is a load of a Tagged value
-    // (MemoryRepresentation::TaggedPointer()), but since it's on the stack
-    // where stack slots are all kSystemPointerSize, we use kSystemPointerSize
-    // for element_size_log2. On 64-bit plateforms with pointer compression,
-    // this means that we're kinda loading a 32-bit value from an array of
-    // 64-bit values.
-#if V8_COMPRESS_POINTERS && V8_TARGET_BIG_ENDIAN
-    constexpr int offset =
-        CommonFrameConstants::kFixedFrameSizeAboveFp - kSystemPointerSize + 4;
-#else
-    constexpr int offset =
-        CommonFrameConstants::kFixedFrameSizeAboveFp - kSystemPointerSize;
-#endif
-    return __ Load(base, index, LoadOp::Kind::RawAligned(),
-                   MemoryRepresentation::TaggedPointer(), offset,
-                   kSystemPointerSizeLog2);
+    V<WordPtr> argument = __ template LoadNonArrayBufferElement<WordPtr>(
+        base, AccessBuilder::ForStackArgument(), index);
+    return __ BitcastWordPtrToTagged(argument);
   }
 
   V<None> REDUCE(StoreTypedElement)(OpIndex buffer, V<Object> base,
